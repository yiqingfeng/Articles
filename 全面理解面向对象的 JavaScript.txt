地址：http://www.ibm.com/developerworks/cn/web/1304_zengyz_jsoo/#ibm-pcon

基于类的面向对象和基于原型的面向对象方式比较

在基于类的面向对象方式中，对象（object）依靠 
类（class）来产生。而在基于原型的面向对象方式中，
对象（object）则是依靠 构造器（constructor）利用 
原型（prototype）构造出来的。举个客观世界的例子来
说明二种方式认知的差异。例如工厂造一辆车，一方面，
工人必须参照一张工程图纸，设计规定这辆车应该如何制造。
这里的工程图纸就好比是语言中的 类 (class)，而车就是
按照这个 类（class）制造出来的；另一方面，工人和机器 
( 相当于 constructor) 利用各种零部件如发动机，轮胎，
方向盘 ( 相当于 prototype 的各个属性 ) 将汽车构造出来。
事实上关于这两种方式谁更为彻底地表达了面向对象的思想，
目前尚有争论。但笔者认为原型式面向对象是一种更为彻底的
面向对象方式，理由如下：
	首先，客观世界中的对象的产生都是其它实物对象构
造的结果，而抽象的“图纸”是不能产生“汽车”的，也就是说，
类是一个抽象概念而并非实体，而对象的产生是一个实体的产生；
	其次，按照一切事物皆对象这个最基本的面向对象的
法则来看，类 (class) 本身并不是一个对象，然而原型方式中的
构造器 (constructor) 和原型 (prototype) 本身也是其他对象
通过原型方式构造出来的对象。
	再次，在类式面向对象语言中，对象的状态 (state) 由
对象实例 (instance) 所持有，对象的行为方法 (method) 则由声
明该对象的类所持有，并且只有对象的结构和方法能够被继承；而
在原型式面向对象语言中，对象的行为、状态都属于对象本身，并
且能够一起被继承（参考资源），这也更贴近客观实际。
	最后，类式面向对象语言比如 Java，为了弥补无法使用
	面向过程语言中全局函数和变量的不便，允许在类中声明静态 (static) 属性和静态方法。而实际上，客观世界不存在所谓静态概念，因为一切事物皆对象！而在原型式面向对象语言中，除内建对象 (build-in object) 外，不允许全局对象、方法或者属性的存在，也没有静态概念。所有语言元素 (primitive) 必须依赖对象存在。但由于函数式语言的特点，语言元素所依赖的对象是随着运行时 (runtime) 上下文 (context) 变化而变化的，具体体现在 this 指针的变化。正是这种特点更贴近 “万物皆有所属，宇宙乃万物生存之根本”的自然观点。在 程序清单 1中 window 便类似与宇宙的概念。
清单 1. 对象的上下文依赖

 <script> 
 var str = "我是一个 String 对象 , 我声明在这里 , 但我不是独立存在的！"
 var obj = { des: "我是一个 Object 对象 , 我声明在这里，我也不是独立存在的。" }; 
 var fun = function() { 
    console.log( "我是一个 Function 对象！谁调用我，我属于谁：", this ); 
 }; 

 obj.fun = fun; 

 console.log( this === window );     // 打印 true 
 console.log( window.str === str );  // 打印 true 
 console.log( window.obj === obj );  // 打印 true 
 console.log( window.fun === fun );  // 打印 true 
 fun();                              // 打印 我是一个 Function 对象！谁调用我，我属于谁：window 
 obj.fun();                          // 打印 我是一个 Function 对象！谁调用我，我属于谁：obj 
 fun.apply(str);                   // 打印 我是一个 Function 对象！谁调用我，我属于谁：str 
 </script>

在接受了面向对象存在一种叫做基于原型实现的方式的事实之后，下面我们就可以来深入探讨 ECMAScript 
是如何依据这一方式构造自己的语言的。



最基本的面向对象

ECMAScript 是一门彻底的面向对象的编程语言（参考资源），JavaScript 
是其中的一个变种 (variant)。它提供了 6 种基本数据类型，即 Boolean、
Number、String、Null、Undefined、Object。为了实现面向对象，ECMAScript
设计出了一种非常成功的数据结构 - JSON(JavaScript Object Notation), 这
一经典结构已经可以脱离语言而成为一种广泛应用的数据交互格式 （参考资源）。

应该说，具有基本数据类型和 JSON 构造语法的 ECMAScript 已经基本可以实现
面向对象的编程了。开发者可以随意地用 字面式声明（literal notation）方式
来构造一个对象，并对其不存在的属性直接赋值，或者用 delete 将属性删除 
( 注：JS 中的 delete 关键字用于删除对象属性，经常被误作为 C++ 中的
delete，而后者是用于释放不再使用的对象 )，如 程序清单 2。
清单 2. 字面式 (literal notation) 对象声明

 var person = { 
    name: “张三”, 
    age: 26, 
    gender: “男”, 
    eat: function( stuff ) { 
        alert( “我在吃” + stuff ); 
    } 
 }; 
 person.height = 176; 
 delete person[ “age” ];

在实际开发过程中，大部分初学者或者对 JS 应用没有太高要求的开发者也
基本上只用到 ECMAScript 定义的这一部分内容，就能满足基本的开发需求。
然而，这样的代码复用性非常弱，与其他实现了继承、派生、多态等等的类式
面向对象的强类型语言比较起来显得有些干瘪，不能满足复杂的 JS 应用开发
。所以 ECMAScript 引入原型来解决对象继承问题。
